package xj.mobile.util

import java.awt.Font

public class FontMetrics { 


  // Font metrics data for Helvetica 15pt
  static byte[]   Helvetica_15pt_Heights = [ 16, 12, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Helvetica_15pt_Widths = [
	//Font name: Helvetica
	[ 5, 5, 6, 9, 9, 14, 11, 3, 5, 5, 6, 9, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 9, 9, 9, 9, 16, 11, 11, 11, 11, 11, 10, 12, 11, 5, 8, 11, 9, 13, 11, 12, 11, 12, 11, 11, 10, 11, 11, 15, 11, 11, 10, 5, 5, 5, 8, 9, 5, 9, 9, 8, 9, 9, 5, 9, 9, 4, 4, 8, 4, 13, 9, 9, 9, 9, 5, 8, 5, 9, 8, 11, 8, 8, 8, 6, 4, 6, 9 ] as byte[],
	//Font name: Helvetica-Bold
	[ 5, 5, 8, 9, 9, 14, 11, 4, 5, 5, 6, 9, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 9, 9, 9, 10, 15, 11, 11, 11, 11, 11, 10, 12, 11, 5, 9, 11, 10, 13, 11, 12, 11, 12, 11, 11, 10, 11, 11, 15, 11, 11, 10, 5, 5, 5, 9, 9, 5, 9, 10, 9, 10, 9, 5, 10, 10, 5, 5, 9, 5, 14, 10, 10, 10, 10, 6, 9, 5, 10, 9, 12, 9, 9, 8, 6, 5, 6, 9 ] as byte[],
	//Font name: Helvetica-Oblique
	[ 5, 5, 6, 9, 9, 14, 11, 3, 5, 5, 6, 9, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 9, 9, 9, 9, 16, 11, 11, 11, 11, 11, 10, 12, 11, 5, 8, 11, 9, 13, 11, 12, 11, 12, 11, 11, 10, 11, 11, 15, 11, 11, 10, 5, 5, 5, 8, 9, 5, 9, 9, 8, 9, 9, 5, 9, 9, 4, 4, 8, 4, 13, 9, 9, 9, 9, 5, 8, 5, 9, 8, 11, 8, 8, 8, 6, 4, 6, 9 ] as byte[],
  ]


  /*
  static byte[][] Helvetica_15pt_Widths = [
    // plain
    [4, 4, 5, 8, 8, 13, 10, 3, 5, 5, 6, 9, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 9, 9, 9, 8, 15, 10, 10, 11, 11, 10, 9, 12, 11, 4, 8, 10, 8, 12, 11, 12, 10, 12, 11, 10, 9, 11, 10, 14, 10, 10, 9, 4, 4, 4, 7, 8, 5, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 8, 3, 12, 8, 8, 8, 8, 5, 8, 4, 8, 8, 11, 8, 8, 8, 5, 4, 5, 9] as byte[],

    // bold
    [4, 5, 7, 8, 8, 13, 11, 4, 5, 5, 6, 9, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 9, 9, 9, 9, 15, 11, 11, 11, 11, 10, 9, 12, 11, 4, 8, 11, 9, 12, 11, 12, 10, 12, 11, 10, 9, 11, 10, 14, 10, 10, 9, 5, 4, 5, 9, 8, 5, 8, 9, 8, 9, 8, 5, 9, 9, 4, 4, 8, 4, 13, 9, 9, 9, 9, 6, 8, 5, 9, 8, 12, 8, 8, 8, 6, 4, 6, 9] as byte[],

    // italic
    [4, 4, 5, 8, 8, 13, 10, 3, 5, 5, 6, 9, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 9, 9, 9, 8, 15, 10, 10, 11, 11, 10, 9, 12, 11, 4, 8, 10, 8, 12, 11, 12, 10, 12, 11, 10, 9, 11, 10, 14, 10, 10, 9, 4, 4, 4, 7, 8, 5, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 8, 3, 12, 8, 8, 8, 8, 5, 8, 4, 8, 8, 11, 8, 8, 8, 5, 4, 5, 9] as byte[],

  ]
  */


  // Font metrics data for Helvetica Neue 15pt
  static byte[]   Helvetica_Neue_15pt_Heights = [ 19, 15, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Helvetica_Neue_15pt_Widths = [
    // plain
    [4, 4, 6, 8, 8, 15, 9, 4, 4, 4, 5, 9, 4, 6, 4, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 9, 9, 9, 8, 12, 10, 10, 11, 11, 9, 9, 11, 11, 4, 8, 10, 8, 13, 11, 11, 10, 11, 10, 10, 9, 11, 9, 14, 9, 10, 9, 4, 5, 4, 9, 8, 3, 8, 9, 8, 9, 8, 4, 9, 8, 3, 3, 8, 3, 13, 8, 9, 9, 9, 5, 8, 5, 8, 8, 11, 8, 8, 7, 5, 3, 5, 9] as byte[],

    // bold
    [4, 4, 7, 8, 8, 15, 10, 4, 4, 4, 6, 9, 4, 6, 4, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 9, 9, 9, 8, 12, 10, 11, 11, 11, 10, 9, 11, 11, 4, 8, 11, 9, 14, 11, 12, 10, 12, 11, 10, 9, 11, 9, 14, 10, 10, 10, 5, 6, 5, 9, 8, 4, 9, 9, 9, 9, 9, 5, 9, 9, 4, 4, 9, 4, 14, 9, 9, 9, 9, 6, 8, 5, 9, 8, 12, 8, 8, 8, 5, 3, 5, 9] as byte[],

    // italic
    [4, 4, 6, 8, 8, 14, 9, 4, 4, 4, 5, 9, 4, 6, 4, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 9, 9, 9, 8, 12, 10, 10, 11, 11, 9, 9, 11, 11, 4, 8, 10, 8, 13, 11, 11, 10, 11, 10, 10, 9, 11, 9, 14, 9, 9, 9, 4, 5, 4, 9, 8, 3, 8, 9, 8, 9, 8, 4, 9, 8, 3, 3, 7, 3, 13, 8, 9, 9, 9, 5, 7, 5, 8, 7, 11, 7, 7, 7, 5, 3, 5, 9] as byte[],

  ]


  // Font metrics data for American Typewriter 15pt
  static byte[]   American_Typewriter_15pt_Heights = [ 18, 14, 4, 0]  // height, ascent, descent, leading 

  static byte[][] American_Typewriter_15pt_Widths = [
    // plain
    [4, 6, 5, 9, 10, 12, 12, 3, 7, 7, 10, 8, 4, 5, 4, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 8, 8, 8, 9, 10, 11, 10, 10, 11, 10, 9, 11, 12, 6, 9, 12, 10, 14, 11, 10, 10, 10, 11, 9, 10, 11, 11, 14, 12, 11, 9, 7, 8, 7, 8, 8, 7, 8, 8, 8, 9, 8, 5, 8, 10, 5, 4, 9, 5, 14, 10, 8, 9, 8, 7, 7, 6, 9, 9, 12, 10, 9, 8, 8, 8, 8, 10] as byte[],

    // bold
    [4, 7, 6, 9, 10, 12, 13, 3, 10, 10, 10, 8, 5, 5, 5, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 8, 8, 8, 9, 11, 12, 11, 10, 11, 11, 11, 11, 13, 7, 10, 12, 10, 16, 13, 10, 10, 10, 11, 9, 10, 13, 11, 15, 11, 11, 10, 10, 8, 10, 8, 8, 7, 9, 9, 8, 10, 8, 6, 8, 10, 5, 5, 10, 5, 14, 10, 8, 9, 9, 8, 8, 7, 10, 10, 13, 10, 9, 8, 8, 8, 8, 10] as byte[],

    // italic
    [4, 6, 5, 9, 10, 12, 12, 3, 7, 7, 10, 8, 4, 5, 4, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 8, 8, 8, 9, 10, 11, 10, 10, 11, 10, 9, 11, 12, 6, 9, 12, 10, 14, 11, 10, 10, 10, 11, 9, 10, 11, 11, 14, 12, 11, 9, 7, 8, 7, 8, 8, 7, 8, 8, 8, 9, 8, 5, 8, 10, 5, 4, 9, 5, 14, 10, 8, 9, 8, 7, 7, 6, 9, 9, 12, 10, 9, 8, 8, 8, 8, 10] as byte[],

  ]


  // Font metrics data for Arial 15pt
  static byte[]   Arial_15pt_Heights = [ 18, 14, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Arial_15pt_Widths = [
    // plain
    [4, 4, 5, 8, 8, 13, 10, 3, 5, 5, 6, 9, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 9, 9, 9, 8, 15, 10, 10, 11, 11, 10, 9, 12, 11, 4, 8, 10, 8, 12, 11, 12, 10, 12, 11, 10, 9, 11, 10, 14, 10, 10, 9, 4, 4, 4, 7, 8, 5, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 8, 3, 12, 8, 8, 8, 8, 5, 8, 4, 8, 8, 11, 8, 8, 8, 5, 4, 5, 9] as byte[],

    // bold
    [4, 5, 7, 8, 8, 13, 11, 4, 5, 5, 6, 9, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 9, 9, 9, 9, 15, 11, 11, 11, 11, 10, 9, 12, 11, 4, 8, 11, 9, 12, 11, 12, 10, 12, 11, 10, 9, 11, 10, 14, 10, 10, 9, 5, 4, 5, 9, 8, 5, 8, 9, 8, 9, 8, 5, 9, 9, 4, 4, 8, 4, 13, 9, 9, 9, 9, 6, 8, 5, 9, 8, 12, 8, 8, 8, 6, 4, 6, 9] as byte[],

    // italic
    [4, 4, 5, 8, 8, 13, 10, 3, 5, 5, 6, 9, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 9, 9, 9, 8, 15, 10, 10, 11, 11, 10, 9, 12, 11, 4, 8, 10, 8, 12, 11, 12, 10, 12, 11, 10, 9, 11, 10, 14, 10, 10, 9, 4, 4, 4, 7, 8, 5, 8, 8, 8, 8, 8, 4, 8, 8, 3, 3, 8, 3, 12, 8, 8, 8, 8, 5, 8, 4, 8, 8, 11, 8, 8, 8, 5, 4, 5, 9] as byte[],

  ]


  // Font metrics data for Courier 15pt
  static byte[]   Courier_15pt_Heights = [ 16, 12, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Courier_15pt_Widths = [
    // plain
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

    // bold
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

    // italic
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

  ]


  // Font metrics data for Courier New 15pt
  static byte[]   Courier_New_15pt_Heights = [ 18, 13, 5, 0]  // height, ascent, descent, leading 

  static byte[][] Courier_New_15pt_Widths = [
    // plain
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

    // bold
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

    // italic
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

  ]


  // Font metrics data for Droid Sans 15pt
  static byte[]   Droid_Sans_15pt_Heights = [ 18, 14, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Droid_Sans_15pt_Widths = [
    // plain
    [4, 4, 6, 10, 8, 12, 11, 3, 5, 5, 8, 8, 4, 5, 4, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 6, 13, 9, 9, 9, 10, 8, 7, 10, 11, 5, 4, 9, 7, 13, 11, 11, 9, 11, 9, 8, 8, 10, 9, 13, 8, 8, 8, 5, 6, 5, 8, 6, 9, 8, 9, 7, 9, 8, 5, 8, 9, 4, 4, 7, 4, 13, 9, 9, 9, 9, 6, 7, 5, 9, 7, 11, 8, 7, 7, 5, 8, 5, 8] as byte[],

    // bold
    [4, 4, 6, 10, 8, 12, 11, 3, 5, 5, 8, 8, 4, 5, 4, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 6, 13, 9, 9, 9, 10, 8, 7, 10, 11, 5, 4, 9, 7, 13, 11, 11, 9, 11, 9, 8, 8, 10, 9, 13, 8, 8, 8, 5, 6, 5, 8, 6, 9, 8, 9, 7, 9, 8, 5, 8, 9, 4, 4, 7, 4, 13, 9, 9, 9, 9, 6, 7, 5, 9, 7, 11, 8, 7, 7, 5, 8, 5, 8] as byte[],

    // italic
    [4, 4, 6, 10, 8, 12, 11, 3, 5, 5, 8, 8, 4, 5, 4, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 6, 13, 9, 9, 9, 10, 8, 7, 10, 11, 5, 4, 9, 7, 13, 11, 11, 9, 11, 9, 8, 8, 10, 9, 13, 8, 8, 8, 5, 6, 5, 8, 6, 9, 8, 9, 7, 9, 8, 5, 8, 9, 4, 4, 7, 4, 13, 9, 9, 9, 9, 6, 7, 5, 9, 7, 11, 8, 7, 7, 5, 8, 5, 8] as byte[],

  ]


  // Font metrics data for Droid Sans Mono 15pt
  static byte[]   Droid_Sans_Mono_15pt_Heights = [ 18, 14, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Droid_Sans_Mono_15pt_Widths = [
    // plain
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

    // bold
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

    // italic
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9] as byte[],

  ]


  // Font metrics data for Droid Serif 15pt
  static byte[]   Droid_Serif_15pt_Heights = [ 18, 14, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Droid_Serif_15pt_Widths = [
    // plain
    [4, 5, 6, 8, 8, 13, 11, 3, 5, 5, 8, 8, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 8, 14, 11, 10, 9, 11, 9, 9, 11, 12, 6, 5, 11, 9, 14, 11, 11, 9, 11, 10, 8, 9, 11, 10, 16, 10, 9, 9, 5, 4, 5, 8, 7, 9, 8, 9, 7, 9, 8, 6, 8, 10, 5, 4, 9, 5, 14, 10, 9, 9, 9, 7, 7, 5, 10, 9, 13, 9, 8, 8, 6, 8, 6, 8] as byte[],

    // bold
    [4, 6, 8, 8, 8, 14, 12, 4, 6, 6, 8, 8, 4, 5, 5, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 4, 8, 8, 8, 8, 14, 11, 10, 10, 12, 10, 9, 12, 12, 6, 6, 11, 10, 14, 12, 12, 10, 12, 11, 9, 10, 11, 10, 16, 11, 10, 10, 6, 4, 6, 8, 7, 9, 9, 10, 8, 10, 9, 6, 8, 10, 5, 5, 10, 5, 15, 10, 9, 10, 10, 8, 7, 6, 10, 9, 13, 10, 9, 8, 7, 8, 7, 8] as byte[],

    // italic
    [4, 5, 6, 8, 8, 13, 11, 3, 5, 5, 8, 8, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 8, 14, 11, 10, 9, 11, 9, 9, 11, 12, 6, 5, 11, 9, 14, 11, 11, 9, 11, 10, 8, 9, 11, 10, 16, 10, 9, 9, 5, 4, 5, 8, 7, 9, 9, 8, 7, 9, 7, 5, 8, 9, 5, 4, 9, 5, 13, 9, 9, 9, 8, 7, 7, 6, 9, 8, 12, 8, 8, 8, 6, 8, 6, 8] as byte[],

  ]


  // Font metrics data for Times New Roman 15pt
  static byte[]   Times_New_Roman_15pt_Heights = [ 18, 14, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Times_New_Roman_15pt_Widths = [
    // plain
    [4, 5, 6, 8, 8, 12, 12, 3, 5, 5, 8, 8, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 7, 14, 11, 10, 10, 11, 9, 8, 11, 11, 5, 6, 11, 9, 13, 11, 11, 8, 11, 10, 8, 9, 11, 11, 14, 11, 11, 9, 5, 4, 5, 7, 8, 5, 7, 8, 7, 8, 7, 5, 8, 8, 4, 4, 8, 4, 12, 8, 8, 8, 8, 5, 6, 4, 8, 8, 11, 8, 8, 7, 7, 3, 7, 8] as byte[],

    // bold
    [4, 5, 8, 8, 8, 15, 12, 4, 5, 5, 8, 9, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 9, 9, 9, 8, 14, 11, 10, 11, 11, 10, 9, 12, 12, 6, 8, 12, 10, 14, 11, 12, 9, 12, 11, 8, 10, 11, 11, 15, 11, 11, 10, 5, 4, 5, 9, 8, 5, 8, 8, 7, 8, 7, 5, 8, 8, 4, 5, 8, 4, 12, 8, 8, 8, 8, 7, 6, 5, 8, 8, 11, 8, 8, 7, 6, 3, 6, 8] as byte[],

    // italic
    [4, 5, 6, 8, 8, 12, 12, 3, 5, 5, 8, 10, 4, 5, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 10, 10, 10, 8, 14, 9, 9, 10, 11, 9, 9, 11, 11, 5, 7, 10, 8, 12, 10, 11, 9, 11, 9, 8, 8, 11, 9, 12, 9, 8, 8, 6, 4, 6, 6, 8, 5, 8, 8, 7, 8, 7, 4, 8, 8, 4, 4, 7, 4, 11, 8, 8, 8, 8, 6, 6, 4, 8, 7, 10, 7, 7, 6, 6, 4, 6, 8] as byte[],

  ]


  // Font metrics data for Verdana 15pt
  static byte[]   Verdana_15pt_Heights = [ 20, 16, 4, 0]  // height, ascent, descent, leading 

  static byte[][] Verdana_15pt_Widths = [
    // plain
    [5, 6, 7, 12, 10, 16, 11, 4, 7, 7, 10, 12, 5, 7, 5, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 12, 12, 12, 8, 15, 10, 10, 10, 12, 9, 9, 12, 11, 6, 7, 10, 8, 13, 11, 12, 9, 12, 10, 10, 9, 11, 10, 15, 10, 9, 10, 7, 7, 7, 12, 10, 10, 9, 9, 8, 9, 9, 5, 9, 9, 4, 5, 9, 4, 15, 9, 9, 9, 9, 6, 8, 6, 9, 9, 12, 9, 9, 8, 10, 7, 10, 12] as byte[],

    // bold
    [5, 6, 9, 13, 11, 19, 13, 5, 8, 8, 11, 13, 5, 7, 5, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 6, 13, 13, 13, 9, 14, 12, 11, 11, 12, 10, 10, 12, 13, 8, 8, 12, 10, 14, 13, 13, 11, 13, 12, 11, 10, 12, 11, 17, 11, 11, 10, 8, 10, 8, 13, 11, 11, 10, 10, 9, 10, 10, 6, 10, 11, 5, 6, 10, 5, 16, 11, 10, 10, 10, 7, 9, 7, 11, 10, 15, 10, 10, 9, 11, 8, 11, 13] as byte[],

    // italic
    [5, 6, 7, 12, 10, 16, 11, 4, 7, 7, 10, 12, 5, 7, 5, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 12, 12, 12, 8, 15, 10, 10, 10, 11, 9, 9, 12, 11, 6, 7, 10, 8, 13, 11, 12, 9, 12, 10, 10, 9, 11, 10, 15, 10, 9, 10, 7, 7, 7, 12, 10, 10, 9, 9, 8, 9, 9, 5, 9, 9, 4, 5, 9, 4, 15, 9, 9, 9, 9, 6, 8, 6, 9, 9, 12, 9, 9, 8, 10, 7, 10, 12] as byte[],

  ]


  // Font metrics data for Zapfino 15pt
  static byte[]   Zapfino_15pt_Heights = [ 52, 29, 23, 0]  // height, ascent, descent, leading 

  static byte[][] Zapfino_15pt_Widths = [
    // plain
    [8, 8, 12, 12, 14, 23, 33, 8, 14, 15, 10, 15, 8, 12, 9, 14, 16, 10, 16, 13, 16, 11, 13, 13, 13, 13, 9, 9, 15, 15, 15, 10, 22, 20, 18, 19, 21, 18, 13, 21, 21, 9, 12, 19, 17, 28, 21, 22, 16, 21, 19, 12, 15, 23, 17, 28, 20, 15, 16, 13, 14, 13, 15, 19, 9, 11, 10, 8, 10, 8, 8, 9, 10, 7, 7, 11, 8, 13, 10, 9, 8, 10, 7, 7, 7, 10, 8, 14, 9, 9, 8, 10, 8, 10, 15] as byte[],

    // bold
    [8, 8, 12, 12, 14, 23, 33, 8, 14, 15, 10, 15, 8, 12, 9, 14, 16, 10, 16, 13, 16, 11, 13, 13, 13, 13, 9, 9, 15, 15, 15, 10, 22, 20, 18, 19, 21, 18, 13, 21, 21, 9, 12, 19, 17, 28, 21, 22, 16, 21, 19, 12, 15, 23, 17, 28, 20, 15, 16, 13, 14, 13, 15, 19, 9, 11, 10, 8, 10, 8, 8, 9, 10, 7, 7, 11, 8, 13, 10, 9, 8, 10, 7, 7, 7, 10, 8, 14, 9, 9, 8, 10, 8, 10, 15] as byte[],

    // italic
    [8, 8, 12, 12, 14, 23, 33, 8, 14, 15, 10, 15, 8, 12, 9, 14, 16, 10, 16, 13, 16, 11, 13, 13, 13, 13, 9, 9, 15, 15, 15, 10, 22, 20, 18, 19, 21, 18, 13, 21, 21, 9, 12, 19, 17, 28, 21, 22, 16, 21, 19, 12, 15, 23, 17, 28, 20, 15, 16, 13, 14, 13, 15, 19, 9, 11, 10, 8, 10, 8, 8, 9, 10, 7, 7, 11, 8, 13, 10, 9, 8, 10, 7, 7, 7, 10, 8, 14, 9, 9, 8, 10, 8, 10, 15] as byte[],

  ]


  static byte[] getFontHeights(String name) {
    switch (name) {
    case 'Helvetica': return Helvetica_15pt_Heights
    case 'Helvetica Neue': return Helvetica_Neue_15pt_Heights
    case 'American Typewriter': return American_Typewriter_15pt_Heights
    case 'Arial': return Arial_15pt_Heights
    case 'Courier': return Courier_15pt_Heights
    case 'Courier New': return Courier_New_15pt_Heights
    case 'Droid Sans': return Droid_Sans_15pt_Heights
    case 'Droid Sans Mono': return Droid_Sans_Mono_15pt_Heights
    case 'Droid Serif': return Droid_Serif_15pt_Heights
    case 'Times New Roman': return Times_New_Roman_15pt_Heights
    case 'Verdana': return Verdana_15pt_Heights
    case 'Zapfino': return Zapfino_15pt_Heights
    default: return Helvetica_15pt_Heights
    }
  }


  static byte[][] getFontWidths(String name) {
    switch (name) {
    case 'Helvetica': return Helvetica_15pt_Widths
    case 'Helvetica Neue': return Helvetica_Neue_15pt_Widths
    case 'American Typewriter': return American_Typewriter_15pt_Widths
    case 'Arial': return Arial_15pt_Widths
    case 'Courier': return Courier_15pt_Widths
    case 'Courier New': return Courier_New_15pt_Widths
    case 'Droid Sans': return Droid_Sans_15pt_Widths
    case 'Droid Sans Mono': return Droid_Sans_Mono_15pt_Widths
    case 'Droid Serif': return Droid_Serif_15pt_Widths
    case 'Times New Roman': return Times_New_Roman_15pt_Widths
    case 'Verdana': return Verdana_15pt_Widths
    case 'Zapfino': return Zapfino_15pt_Widths
    default: return Helvetica_15pt_Widths
    }
  }


  static float getFontHeight(String name, int size) {
	float scale = 1
	if (size != 15) scale = (float) size / 15f
	byte[] fheights = getFontHeights(name)
	return fheights[0] * scale
  }


  static float getStringWidth(String text, String fname, int size, String style = null) { 
	float width = 0
    if (text && size > 0) { 
      int fstyle = 0 // Font.PLAIN
      if (style) { 
		style = style.toLowerCase()
		//if (style.indexOf('bold') >= 0) { 
		if (style == 'bold') { 
		  fstyle = 1 // Font.BOLD
		  //} else if (style.indexOf('italic') >= 0) { 
		} else if (style == 'italic') { 
		  fstyle = 2 // Font.ITALIC
		}
      }

	  float scale = 1
	  if (size != 15) scale = (float) size / 15f
	  //byte[] fwidths = Helvetica_15pt_Widths[fstyle]
	  byte[] fwidths = getFontWidths(fname)[fstyle]
	  
	  //for (char c in text) {  
	  for (int i = 0; i < text.length(); i++) { 
		char c = text.charAt(i)
		if (c >= 32 && c <= 126) { 
		  width += fwidths[c - 32] * scale
		  //println "width of ${c} = ${fwidths[c - 32]}, scale = ${scale} style = ${style} (${fstyle})"
		}
	  }
	}
	return width
  }

  static test() { 
	println 'Test FontMetrics'
	println "15pt Width of: abc =" + getStringWidth('abc', 'Helvetica', 15, 'Plain')
	println "17pt Width of: abc =" + getStringWidth('abc', 'Helvetica', 17, 'Plain')

	println "36pt Helvetica Width of: \"Hello World!\" =" + 
	        getStringWidth('Hello World!', 'Helvetica', 36)
	println "36pt Bold Helvetica Width of: \"Hello World!\" =" + 
	        getStringWidth('Hello World!', 'Helvetica', 36, 'Bold')
	println "36pt Bold Helvetica Neue Width of: \"Hello World!\" =" + 
	        getStringWidth('Hello World!', 'Helvetica Neue', 36, 'Bold')
  }

}