package xj.mobile.lang

/*
 * To-do: 
 * Validation: 
 *   composition 
 *   attribute sets: name-type, unchecked attributes  
 * 
 */

class Language {  

  enum ViewType { TopView, Container, Widget, Popup, Composite }; 
  enum Platform { Neutral, iOS, Android }

  static definitions = [

    // top views 

    View: [  
      type: ViewType.TopView,
      platforms: [ Platform.Neutral ]
    ],

    TabbedView: [
      type: ViewType.TopView,
      platforms: [ Platform.Neutral ]
    ],
 
    NavigationView: [ // deprecated in model, generated by tramsformation 
      type: ViewType.TopView,
      platforms: [ Platform.Neutral ]
    ],

    ListView: [
      type: ViewType.TopView,
	  embeddable: true,
      platforms: [ Platform.Neutral ]
    ],

    // Popups 

    Alert: [
      type: ViewType.Popup,
      platforms: [ Platform.Neutral ]
    ],

    Popup: [
      type: ViewType.Popup,
      platforms: [ Platform.Neutral ]
    ],

    Menu: [
      type: ViewType.Popup,
      platforms: [ Platform.Neutral ]
    ],

    DatePickerDialog: [
      type: ViewType.Popup,
      platforms: [ Platform.Neutral ]
    ],

    TimePickerDialog: [
      type: ViewType.Popup,
      platforms: [ Platform.Neutral ]
    ],

    // groups 

    Panel: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    FlowPanel: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    GridPanel: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    DockPanel: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    AbsolutePanel: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    StackPanel: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    SplitPanel: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    Box: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    Table: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],

    Row: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ]
    ],
 
    Section: [
      type: ViewType.Container,
      platforms: [ Platform.Neutral ],
      requires : { it.parent.widgetType in [ ListView, ExpandableListView ] }
    ],

    // widgets 

    Label: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Image: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Button:  [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Text : [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ], 

    Switch: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Slider: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Selection: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    NumberStepper: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    CheckBox: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    RadioButton: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    RadioGroup: [
      type: ViewType.Container,
      hasProperties: true,
      platforms: [ Platform.Neutral ]
    ],

    ProgressBar: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Picker: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    DatePicker: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    TimePicker: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Item: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Web: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Map: [
      type: ViewType.Composite,
      platforms: [ Platform.Neutral ]
    ],

    Annotation: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Toast: [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ],

    Canvas : [
      type: ViewType.Widget,
      platforms: [ Platform.Neutral ]
    ], 

    // iOS specific

    PageView: [
      type: ViewType.TopView,
      platforms: [ Platform.iOS ]
    ],

    DateTimePicker: [
      type: ViewType.Widget,
      platforms: [ Platform.iOS ]
    ],

    PageControl: [
      type: ViewType.Widget,
      platforms: [ Platform.iOS ]
    ],

    Page: [
      type: ViewType.Composite,
      platforms: [ Platform.iOS ]
    ],
 

    // Android specific 

    ExpandableListView: [
      type: ViewType.TopView,
      platforms: [ Platform.Android ]
    ],

    Spinner: [
      type: ViewType.Widget,
      platforms: [ Platform.Android ]
    ],

    SpinnerGroup: [
      type: ViewType.Container,
      hasProperties: true,
      platforms: [ Platform.Android ]
    ],

    ImageButton: [
      type: ViewType.Widget,
      platforms: [ Platform.Android ]
    ],

  ]

  static ViewType getViewType(name) { 
    definitions[name]?.type
  }

  static boolean isTopView(name) { 
	if (Aliases[name]) name = Aliases[name]
    return definitions[name]?.type == ViewType.TopView
  }

  static boolean isPopup(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name]?.type == ViewType.Popup
  }

  static boolean isGroup(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name]?.type == ViewType.Container
  }

  static boolean isContainer(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name]?.type == ViewType.Container
  }

  static boolean isMenu(name) { 
    if (Aliases[name]) name = Aliases[name]
    return name == 'Menu'
  }

  static boolean isView(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name]?.type in [ ViewType.TopView, ViewType.Container, ViewType.Popup ]
  }

  static boolean isComposite(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name]?.type == ViewType.Composite
  }

  static boolean isWidget(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name]?.type in [ ViewType.Widget, ViewType.Composite ]
  }

  static boolean hasProperties(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name]?.hasProperties
  }

  static boolean isDefined(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name] != null
  }

  static boolean isUI(name) { 
    if (Aliases[name]) name = Aliases[name]
    return definitions[name] != null
  }

  static Set getTopViewNames() { 
    definitions.keySet.finaAll { isTopView(it) }
  }

  static Set getGroupNames() { 
    definitions.keySet.finaAll { isGroup(it) }
  }

  static Set getViewNames() { 
    definitions.keySet.finaAll { isView(it) }
  }

  static Set getWidgetNames() { 
    definitions.keySet.finaAll { isWidget(it) }
  }

  //
  //  Transitions
  //

  static Gestures = [ 
	'Shake', 
	'Touch', 
	'Drag',
	'Swipe', 
	'Pinch', 
	'Tap', 
	'DoubleTap', 
	'Rotation', 
	'LongPress', 
	'Motion', 
	'OrientationChange', 
	'DeviceOrientationChange' 
  ]

  static Events = [
	'when',
  ]

  static boolean isTransition(String name) { 
	if (name) { 
	  if (Aliases[name]) name = Aliases[name]
	  return name in Events || name.startsWith('on') && name[2 .. -1] in Gestures
	} else { 
	  return false
	} 
  }

  static getTransitions() { 
	Events + Gestures.collect { 'on' + it }
  } 

  static boolean isState(String name) { 
	name == 'state'
  }

  //
  // Actions 
  //

  static Actions = [ 
	'onEntry', 'onExit', 'onDone',
	'do', 'doAfter', 
	//'doLater', 'doOutside',
	'draw'
  ]

  static boolean isAction(String name) { 
	name in Actions
  }

  //
  // Graphics 
  //

  static Shapes = [
	'Point', 'Line', 'Curve', 'Rect', 'Ellipse', 'Circle', 'Arc',
	'ImageShape', 'TextShape'
  ]

  static PathElements = [
	'moveTo', 'lineTo', 'curveTo', 'arcTo'
  ]

  static Graphics = Shapes + PathElements + [ 'Path' ]

  static boolean isGraphics(String name) { 
	name in Graphics
  }

  static boolean isShape(String name) { 
	name in Shapes
  }

  static boolean isPathElement(String name) { 
	name in PathElements
  }

  static isTextShape(String name) { 
	name == 'TextShape' 
  }

  static isImageShape(String name) { 
	name == 'ImageShape' 
  }


  //
  // Aliases 
  // 

  static Aliases = [
	// transitions 
	onFling:  'onSwipe',
	onScale:  'onPinch',
	onPan:    'onDrag', 
	onScroll: 'onDrag', 
  ]

}